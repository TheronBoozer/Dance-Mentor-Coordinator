from Timekeeping.Hourly_Time import Hourly_Time


class Quarter_Hour:
    """
    A quarter hour time slot that holds the start and end times as well as the weekday and whether it is available
    """
    


    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # /////////////////////////////////////////*   ATTRIBUTES   *///////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////

    available = False                       # whether or not the quarter is available - True for not booked
    start_time = Hourly_Time(0)             # the time this quarter begins
    end_time = Hourly_Time(0)               # the time this quarter ends - equal to the time the next quarter begins
    weekday = -1                            # which weekday it falls on - 0 is monday, -1 for undefined



    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # ////////////////////////////////////////*   INITIALIZER   *///////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////

    def __init__(self, weekday, start_time:int):
        self.weekday = weekday                                                      # save the given weekday
        self.start_time = Hourly_Time(start_time)                                   # save the given start time
        self.end_time = Hourly_Time(self.start_time.get_int_time() + 15*60)         # add 15 minutes to the start time and save it as the end time

    @classmethod
    def without_weekday(self, start_time:int):
        return Quarter_Hour(-1, start_time)                                         # if called without_weekday the Quarter_Hour will be given a weekday of -1
        


    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # //////////////////////////////////////*   PRIVATE METHODS   */////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////

    def __convert_weekday(self):
        weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
        return weekdays[self.weekday]



    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # //////////////////////////////////////////*   GETTERS   */////////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////

    def get_weekday(self):
        return self.weekday
    
    def get_string_weekday(self):
        return self.__convert_weekday()
    
    def get_availability(self):
        return self.available
    
    def get_start_time(self):
        return self.start_time
    
    def get_end_time(self):
        return self.end_time

    def get_start_int(self):
        return self.start_time.get_int_time()
    
    def get_end_int(self):
        return self.end_time.get_int_time()


    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # //////////////////////////////////////////*   SETTERS   */////////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////

    def set_available(self):
        self.available = True
        return self

    def set_unavailable(self):
        self.available = False
        return self



    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # /////////////////////////////////////////*   TO STRING   *////////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////
    # //////////////////////////////////////////////////////////////////////////////////////////////////////////

    def __str__(self) -> str:
        return "{}{} at {} - {}\033[00m".format("\033[042m" if self.get_availability() else "\033[041m", self.__convert_weekday(), self.get_start_time(), self.get_end_time())
